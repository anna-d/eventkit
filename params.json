{
  "name": "EventKit",
  "tagline": "A conference management framework",
  "body": "EventKit \r\n========\r\nConference management framework\r\n\r\n\r\nREQUIREMENTS\r\n------------\r\n\r\n- If you are going to use Vagrant for this project you will need to install Virtualbox and Vagrant to your machine. All the needed components are already installed there. \r\n- If you have your own developing enviroment make sure you have a LAMP stack with PHP 5.4.0. or higher and **php5-intl** extension enabled (used for International date/time/number/currency formatting). To install this extension on Ubuntu run: `sudo apt-get install php5-intl`.\r\n\r\n\r\nPrepare your development environment\r\n------------------------------------\r\n\r\n### 1. Fork the 'eventkit' repository on GitHub and clone your fork to your development environment\r\n```\r\ngit clone https://github.com/YOUR-GITHUB-USERNAME/eventkit.git\r\n```\r\n\r\n### 2. Add the main 'eventkit' repository as an additional git remote called \"upstream\"\r\n```\r\ngit remote add upstream https://github.com/leoshtika/eventkit.git\r\n```\r\n\r\n### 3. Install LAMP stack with Vagrant\r\n```\r\nvagrant up\r\nvagrant ssh\r\ncd /vagrant\r\n```\r\nNow you are inside the VM and in the /vagrant folder. All the following commands will be executed from here.\r\n\r\n### 4. Install dependencies\r\n```\r\ncomposer global require \"fxp/composer-asset-plugin:~1.1.1\"\r\ncomposer install\r\n```\r\n\r\n### 5. Initialize the application\r\n```\r\nphp init\r\n```\r\nSelect [0] Development environment\r\n\r\n### 6. Install phpmyadmin\r\n```\r\nsudo apt-get install phpmyadmin\r\n```\r\nOpen phpmyadmin from: `http://localhost:4000/phpmyadmin`\r\nusername: `root`, password: `pass123`\r\n\r\n### 7. Configure the database\r\n- Create a database and name it `eventkit`\r\n- Open the common/config/main-local.php file and change host = `localhost`, dbname = `eventkit`, username = `root` & password = `pass123` \r\n- Using the phpmyadmin import the eventkit.sql database from DB BACKUP folder\r\n\r\n\r\nWorking on bugs and features\r\n----------------------------\r\nHaving prepared your develop environment as explained above you can now start working on a feature or bugfix.\r\n\r\n### 1. Make sure there is an issue created for the thing you are working on if it requires significant effort to fix\r\nAll new features and bug fixes should have an associated issue to provide a single point of reference for discussion \r\nand documentation.\r\nIf you do not find an existing issue matching what you intend to work on, please open a new issue or create \r\na pull request directly if it is straightforward fix.\r\n\r\n### 2. Fetch the latest code from the main 'eventkit' branch\r\nYou should start at this point for every new contribution to make sure you are working on the latest code.\r\n```\r\ngit checkout master\r\ngit pull upstream master\r\n```\r\n\r\n### 3. Create a new branch for your feature based on the current master branch\r\nEach separate bug fix or change should go in its own branch. Branch names should be descriptive and start with the \r\nnumber of the issue that your code relates to. If you aren't fixing any particular issue, just skip number. For example:\r\n```\r\ngit checkout -b 999-name-of-your-branch\r\n```\r\n\r\n### 4. Do your magic, write your code\r\nAll new code should follow [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) \r\ncoding standard. Make sure it works :)\r\n\r\n### 5. Commit your changes\r\n```\r\ngit add --all\r\ngit commit -m \"Resolve #999: A brief description of this change\"\r\n```\r\n\r\n### 6. Pull the latest code from upstream, rebase & squash your changes\r\nBefore pushing your code to GitHub make sure to integrate upstream changes into your local repository\r\n```\r\ngit checkout master\r\ngit pull upstream master\r\ngit checkout 999-name-of-your-branch\r\ngit rebase master\r\n```\r\nThis ensures that your changes can be merged with one click. \r\n\r\n**Squash commits** \r\nThis step is not always necessary, but is required when your commit history is full of small, unimportant commits.\r\n```\r\ngit rebase -i master\r\n```\r\n\r\n### 7. Push your code to GitHub\r\n```\r\ngit push -u origin 999-name-of-your-branch\r\n```\r\n\r\n### 8. Open a [pull request](https://help.github.com/articles/creating-a-pull-request-from-a-fork/) against upstream\r\nGo to your repository on GitHub and click \"Pull Request\", choose 'develop' as the base branch and your '999-name-of-your-branch' as the head branch and enter some more details in the comment box. To link the pull request to the issue put anywhere in the pull comment #999 where 999 is the issue number.\r\nNote that each pull-request should fix a single change.\r\n\r\n### 9. Someone will review your code\r\nSomeone will review your code, and you might be asked to make some changes, if so go to step #5 \r\n(you don't need to open another pull request if your current one is still open). \r\nIf your code is accepted it will be merged into the main branch and become part of the next release.\r\n\r\n### 10. Cleaning it up\r\nAfter your code was either accepted or declined you can delete branches you've worked with from your local repository and origin.\r\n```\r\ngit checkout master\r\ngit branch -D 999-name-of-your-branch\r\ngit push origin --delete 999-name-of-your-branch\r\n```\r\n\r\n\r\nMessage Translations\r\n--------------------\r\nTo generate(extract) the translation files inside common/messages, run in the console from the root folder:\r\n```\r\n./yii message/extract @common/config/i18n.php\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}